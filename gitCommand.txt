git init 初始化一个仓库
git add <file><file>...  预提交n个文件 (放至暂存区)
git commit -m "日志" 提交修改
git status 查看仓库状态，显示本地修改
git diff <file> 查看改动
git log 显示日志
git log --pretty=oneline 简单显示日志
HEAD表示当前版本，上一个版本就是HEAD^，上n个版本就是HEAD~n
git reset --hard HEAD^ 回退到上一个版本
git reset --hard 版本ID 回退到指定版本
git reflog 用来记录你的每一次命令
git checkout -- <file>
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
cat <file> 查看文件内容
pwd 查看当前所在目录
git remote add origin git@github.com:lyfwfm/learngit.git  本地仓库与github仓库关联
	添加后，远程库的名字就是origin
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
git push -u origin master
从现在起，只要本地作了提交，就可以通过命令：git push origin master
git clone git@github.com:michaelliao/gitskills.git 克隆远程仓库
我们创建dev分支，然后切换到dev分支：git checkout -b dev
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch dev   git checkout dev
用git branch命令查看当前分支
切换分支：git checkout <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
用git log --graph命令可以看到分支合并图。
 git merge --no-ff -m "merge with no-ff" dev    
	Fast forward模式，这种模式下，删除分支后，会丢掉分支信息
	--no-ff参数，表示禁用Fast forward

git stash  相当于暂存工作现场（将没有完成的工作暂存起来，先处理紧急的BUG）（相当于弄两个工作目录）
	git stash
	git stash list命令查看所有暂存起来的工作现场
	git stash apply <name>恢复指定工作现场(恢复后不删除)
	git stash drop <name>来删除指定工作现场
	git stash pop，恢复的同时把stash内容也删了
git branch -D <name> 强行删除一个分支
要查看远程库的信息，用git remote
git remote -v显示更详细的信息
你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
	git checkout -b dev origin/dev
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
	git branch --set-upstream dev origin/dev
	（如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream branch-name origin/branch-name。）
git tag <name>就可以打一个新标签
git tag查看所有标签
git tag <tagName> <commit id>给指定版本打标签
git show <tagname>查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
	git tag -a v0.1 -m "version 0.1 released" 3628164
git tag -d v0.1 删除标签
如果要推送某个标签到远程，使用命令git push origin <tagname>
一次性推送全部尚未推送到远程的本地标签：
	git push origin --tags
(如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
	git tag -d v0.9
	Deleted tag 'v0.9' (was 6224937)
	然后，从远程删除。删除命令也是push，但是格式如下：
	git push origin :refs/tags/v0.9)
git config --global alias.st status 配置命令的简写